<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<title>Index</title>

<!-- 
     FITXER INICIAL PEL DIA 1:
     - Llum direccional relativa al observador i llum ambient.
     - Mètodes per dibuixar primitives bàsiques (cubs, esferes i piràmides). Aquests mètodes no apliquen transformacions, simplement
       dibuixen les primitives amb la ModelView i la Projection actuals (que s'envien als shaders amb Renderer::setMatrixUniforms() ).
     - Càmera que rota al voltant de la escena.
     - En el mètode Renderer::handleKeys(deltaTime) poden determinar accions a fer en funció dels events del teclat i els botons del
       ratolí.
     OBJECTIUS:
     - Aprendre a dibuixar i moure objectes al voltant de l'escena. Primer haurien de familiaritzar-se amb aquest "esquelet", dibuixar
       unes primitives bàsiques i aprendre a aplicar translacions i rotacions a la ModelView (i en quin ordre) per moure els objectes per
       l'escena. Després hauríen de implementar la funció que dibuixa una piràmide, així com la generació dels VAOs que el defineixen (que
       refacin el fitxer Piramid.js per dibuixar piràmides). Poden cambiar els colors dels vèrtex i la posició, etc.

-->

<!-- operacions amb matrius -->
<script type="text/javascript" src="./index/gl-matrix-min.js"></script>

<!-- utilitats per compatibilitat entre navegadors -->
<script type="text/javascript" src="./index/webgl-utils.js"></script>

<!-- Models -->
<script type="text/javascript" src="./index/Cube.js"></script>
<script type="text/javascript" src="./index/Ball.js"></script>
<script type="text/javascript" src="./index/Pyramid.js"></script>

<!-- Camera -->
<script type="text/javascript" src="./index/Camera.js"></script>

<!-- Utilitat per carregar textures i degToRad -->
<script type="text/javascript" src="./index/utils.js"></script>
<script type="text/javascript" src="./index/objloader.js"></script>

<!-- vertex shader -->
<script id="shader-vs" type="x-shader/x-vertex">
    attribute vec3 aVertexPos;
    attribute vec3 aVertexNormal;
    attribute vec3 aVertexColor;
    attribute vec2 aTextureCoords;

    uniform mat4 uMMatrix;
    uniform mat4 uVMatrix;
    uniform mat4 uPMatrix;
    uniform mat3 uNMatrix;
    uniform float time;

    vec3 colorAmbient = vec3(0.1,0.1,0.1);
    vec3 colorLlum = vec3(0.8,0.8,0.8);
    vec3 dirLlum = vec3(0.25,0.25,1.0);
    vec3 Ke = vec3(.2,.2,.2);
    vec3 Ko = aVertexColor;
    vec3 Ks = vec3(1.0,1.0,1.0);
    float s = 0.5;
    
    
    varying vec4 vColor;
    varying vec4 vPosicio;
    varying vec3 vNormalTransformada;
    varying vec3 vertex;

    void main(void) {
        vertex = aVertexPos;
        mat4 uMVMatrix = uVMatrix*uMMatrix;
        vec4 mvPosition = uMVMatrix * vec4(aVertexPos, 1.0); //calculem la posició del vertex en coordenades de camera (view*model)
        vPosicio = mvPosition;
        vec3 normalTransformada =  normalize(uNMatrix * aVertexNormal);
        vNormalTransformada = normalTransformada;
        vec3 V = normalize(mvPosition.xyz);
        vec3 H = V+normalize(dirLlum);
        float factorLlumDireccional = max(dot(normalTransformada, dirLlum), 0.0);
        
        vec3 color = Ke+Ko*colorAmbient+Ko*colorLlum*max(0.0,dot(normalTransformada,dirLlum))+s*colorLlum*pow(max(0.0,dot(normalTransformada,H)),s);
        

        gl_Position = uPMatrix * mvPosition; //transformem la posició del vertex segons el format de la càmera
	vColor = vec4((colorAmbient + colorLlum * factorLlumDireccional) * color, 1.);
    }
</script>

<!-- fragment shader -->
<script id="shader-fs" type="x-shader/x-fragment">
    precision mediump float;

    uniform mat4 uMMatrix;
    uniform mat4 uVMatrix;

    varying vec2 vCoordTextura;
    varying vec3 vNormalTransformada;
    varying vec4 vPosicio;
    varying vec4 vColor;
    varying vec3 vertex;

    vec3 colorAmbient = vec3(0.9,0.9,0.9);
    vec3 colorLlum = vec3(1., 1., 1.);
    uniform vec3 uPosLlum;// = vec3(0.,0., 0.);
    uniform vec3 uPosLlum2;// = vec3(0.,0., 0.);
    uniform vec3 direccio;
    uniform sampler2D uSampler;

    void main(void) {   // abans vmatrix normalize(direccio)
        float DIST = 35.;
        mat4 uMVMatrix = uVMatrix*uMMatrix;
        vec3 non =vec4(uVMatrix * vec4(uPosLlum,1.0)).xyz - vPosicio.xyz;
    vec3 lightDirection = normalize(non);
        float factorLlumDireccional = max(dot(normalize(direccio), lightDirection), 0.0);
        if (factorLlumDireccional<.95 || length(non) > DIST) factorLlumDireccional=0.;
        vec3 factorLlum = 2.*colorAmbient + colorLlum * factorLlumDireccional*2.*10./length(non);//+colorLlum*pow(max(0.0, dot(vNormalTransformada, normalize(vPosicio.xyz)+lightDirection)),0.);

        vec3 light2Direction = normalize(vec4(uVMatrix * vec4(uPosLlum2,1.0)).xyz - vPosicio.xyz);
        float factorLlum2Direccional = max(dot(normalize(direccio), light2Direction), 0.0);
        if (factorLlum2Direccional<.95 || length(non) > DIST) factorLlum2Direccional=0.;
        vec3 factorLlum2 = 2.*colorAmbient + colorLlum * factorLlum2Direccional*2.*10./length(non);

        vec4 colorTextura = texture2D(uSampler, vec2(vColor.s, vColor.t));
        gl_FragColor = vec4(vColor.rgb * max(factorLlum,factorLlum2), vColor.a);
    }

/*    precision mediump float;

    varying vec4 vColor;

    void main(void) {
        gl_FragColor =  vColor;
    }*/
</script>
<!--
<script id="refl-vs" type="x-shader/x-vertex">
    attribute vec3 aVertexPos;
    attribute vec3 aVertexNormal;
    attribute vec3 aVertexColor;
    attribute vec2 aTextureCoords;

    uniform mat4 uMVMatrix;
    uniform mat4 uPMatrix;
    uniform mat3 uNMatrix;

    varying vec3 vColor;
    varying vec3 normalTransformada;
    varying vec3 posEyeC;

    void main(void) {
        vec4 mvPosition = uMVMatrix * vec4(aVertexPos, 1.0); //calculem la posició del vertex en coordenades de camera (view*model)
    posEyeC = mvPosition.xyz;
        gl_Position = uPMatrix * mvPosition; //transformem la posició del vertex segons el format de la càmera
        normalTransformada =  normalize(uNMatrix * aVertexNormal);
    vColor = aVertexColor;
    }
</script>
<script id="refl-fs" type="x-shader/x-fragment">
    precision highp float;

    vec3 colorAmbient = vec3(0.1,0.1,0.1);
    vec3 colorLlum = vec3(0.8,0.8,0.8);
    vec3 dirLlum = normalize(vec3(0.25,0.25,1.0));

    varying vec3 vColor;
    varying vec3 normalTransformada;
    varying vec3 posEyeC;

    void main(void) {
    vec3 nrmlFrag = normalize(normalTransformada);
    float factr = max(dot(dirLlum, nrmlFrag), 0.0);
    vec3 H = normalize(dirLlum+normalize(-posEyeC));
    float refl = pow(max(dot(H, nrmlFrag), 0.0), 200.);
        gl_FragColor =  vec4(vColor * (vec3(factr)+colorAmbient), 1.0) + vec4(refl, refl, refl, 1.0);
    }
</script>-->
<!-- renderer -->
<script type="text/javascript"> 
CAMERA_ACTUAL = 0;
    function Renderer(canvas) {
	this.gl = this.initGL(canvas); //el contexte utilitzat.
	this.shaderProgram = this.initShaders("shader-vs","shader-fs");
	
    this.t = 0;
    this.posX = 0;
    this.posZ = 0;
    this.rotacio = 0;
    this.camPosX = 0;
    this.camPosZ = -10;
    this.v = 0;
    this.fov = 45;
    this.sentit = 1;
	//ModelView Matrix, i un stack per fer push i pop
        this.mvMatrix = mat4.create();
        this.vMatrix = mat4.create();
    	this.mvMatrixStack = [];

	//vista stàndard de perspectiva (3D) aplicada a la Projection Matrix. ZNEAR = 3, ZFAR = 17, FOVY = 45
    	this.pMatrix = mat4.create();
	mat4.perspective(this.pMatrix,45, this.gl.viewportWidth / this.gl.viewportHeight, .01, 5000);

	this.tempsPrevi = 0.0; // utilitzat per calcular el deltaTime de cada frame

	//objectes
	this.car = new Mesh("models/sensevidres");
    this.floor = new Cube(this.gl);
	this.ball = new Ball(this.gl);
	this.pyramid = new Pyramid(this.gl);

	//camera amb rotacions eulerianes (angles X i Y només)
	this.camera = new Camera();

        this.gl.enable(this.gl.DEPTH_TEST); //activar el depth-buffer
        this.gl.clearColor(0.0, 0.0, 0.0, 1.0); //netejar a negre la pantalla
	
	//input
	this.teclesPresionades = {}
	this.mouseDown = false;
	this.mouseX = 0;
	this.mouseY = 0;
	this.nouMouseX = 0;
	this.nouMouseY = 0;	

    this.posLlum = vec3.fromValues(0., 0., 0.);

	var renderer = this;
    	document.onkeydown = function(event) { renderer.handleKeyDown(event); };
    	document.onkeyup = function(event) { renderer.handleKeyUp(event); };
        canvas.onmousedown = function(event) { renderer.handleMouseDown(event); };
        document.onmouseup = function(event) { renderer.handleMouseUp(event); };
        document.onmousemove = function(event) { renderer.handleMouseMove(event); };
    }

    Renderer.prototype.handleMouseDown = function(event) {
        this.mouseDown = true;
    }

    Renderer.prototype.handleMouseUp = function(event) {
        this.mouseDown = false;
    }

    Renderer.prototype.handleMouseMove = function(event) {
        this.nouMouseX = event.clientX;
        this.nouMouseY = event.clientY;
    }

    Renderer.prototype.handleKeyDown = function(event) {

        this.teclesPresionades[event.keyCode] = true;
        //alert(event.keyCode);
    }

    Renderer.prototype.handleKeyUp = function(event) {

        if (event.keyCode == 67) {
            CAMERA_ACTUAL++;
        }

        this.teclesPresionades[event.keyCode] = false;
    }

    DESACCELERACIO_NORMAL = 0.005;
    DESACCELERACIO_FRENS = 0.05;
    ACCELERACIO = 0.01;
    VELOCITAT_MAXIMA = 1;

    Renderer.prototype.handleKeys = function(deltaTime) {
        var st = this.v*80+"";
        document.getElementById("msg").innerHTML = (st.substr(0,3)) + "km/h";
        //Per fer servir aquesta funció, utilitzem:
        if(this.teclesPresionades[87] ) { 
            this.camPosZ += 0.1;
        } if(this.teclesPresionades[83] )
        {
            this.camPosZ -= 0.1;
        } if(this.teclesPresionades[65] )
        {
            this.camPosX += 0.1;
        // recordeu que la variable this.mouseDown és true si el botó del ratolí està premut.
        } if(this.teclesPresionades[68] )
        {
            this.camPosX -= 0.1;
        } if(this.teclesPresionades[38] && !this.teclesPresionades[66]){ // endavant
                this.v = Math.min(VELOCITAT_MAXIMA, this.v+ACCELERACIO);
                this.sentit = 1;
        } else if(this.teclesPresionades[40] && !this.teclesPresionades[66])//endarre
        {
                this.v = Math.max(-VELOCITAT_MAXIMA, this.v-ACCELERACIO);
                this.sentit = -1;
        }  else if (!this.teclesPresionades[66]) { // desaccelerem
            if (this.v > 0)
                { 
                    this.v = Math.max(0, this.v-DESACCELERACIO_NORMAL);
                    this.sentit = 1;
                }
            else if (this.v < 0)
                { 
                this.v = Math.min(0, this.v+DESACCELERACIO_NORMAL); 
                this.sentit = -1;
                }
        } else {
            if (this.v > 0)
                { 
                    this.v = Math.max(0, this.v-DESACCELERACIO_FRENS);
                    this.sentit = 1;
                }
            else if (this.v < 0)
                { 
                this.v = Math.min(0, this.v+DESACCELERACIO_FRENS); 
                this.sentit = -1;
                }
        }

        if(this.teclesPresionades[37] && this.v != 0){
        this.rotacio +=1*this.sentit;
        }
        if(this.teclesPresionades[39] && this.v != 0 ){
            this.rotacio -=1*this.sentit;
        }
        this.posX -= Math.sin(degToRad(this.rotacio))*this.v;
        this.posZ -= Math.cos(degToRad(this.rotacio))*this.v;

        console.log(this.v);

    }

    Renderer.prototype.handleMouse = function(deltaTime) {
	var deltaX = this.nouMouseX -this.mouseX;
	var deltaY = this.nouMouseY -this.mouseY;
	if(this.mouseDown ) {
	    this.camera.rotateX(deltaY); //l'eix X controla la rotació vertical (mirar a dalt o abaix)
	    this.camera.rotateY(deltaX); //l'eix Y controla la rotació horitzontal (mirar a esquerra o dreta)
	}
	this.mouseX = this.nouMouseX;
	this.mouseY = this.nouMouseY;
    }

    Renderer.prototype.initGL = function(canvas) { //retorna un contexte en el canvas donat, amb el format del canvas
        try {
            var gl = canvas.getContext("experimental-webgl");
            gl.viewportWidth = canvas.width;
            gl.viewportHeight = canvas.height;
        } catch (e) {
        }
        if (!gl) {
            alert("Could not initialise WebGL, sorry :-(");
        }
	return gl;
    }

    Renderer.prototype.getShader = function(id) { //retorna un shader a partir d'una id
        var shaderScript = document.getElementById(id);
        if (!shaderScript) {
            return null;
        }

        var str = "";
        var k = shaderScript.firstChild;
        while (k) {
            if (k.nodeType == 3) { //node de tipus text
                str += k.textContent;
            }
            k = k.nextSibling;
        }

        var shader;
        if (shaderScript.type == "x-shader/x-fragment") {
            shader = this.gl.createShader(this.gl.FRAGMENT_SHADER);
        } else if (shaderScript.type == "x-shader/x-vertex") {
            shader = this.gl.createShader(this.gl.VERTEX_SHADER);
        } else {
            return null;
        }

        this.gl.shaderSource(shader, str);
        this.gl.compileShader(shader);
        if (!this.gl.getShaderParameter(shader, this.gl.COMPILE_STATUS)) { //error de compilació
            alert(this.gl.getShaderInfoLog(shader));
            return null;
        }

        return shader;
    }

    Renderer.prototype.initShaders = function(stringV,stringF) { //retorna un programa a partir de dos shaders
        var vertexShader = this.getShader(stringV);
        var fragmentShader = this.getShader(stringF);

        var program = this.gl.createProgram();
        this.gl.attachShader(program, vertexShader);
        this.gl.attachShader(program, fragmentShader);
        this.gl.linkProgram(program);

        if (!this.gl.getProgramParameter(program, this.gl.LINK_STATUS)) {
            alert("No s'han pogut inicialitzar els shaders");
        }

        this.gl.useProgram(program);

	//Declarem aquí els atributs i les uniforms del programa que hem compilat
        program.vertexPositionAttribute = this.gl.getAttribLocation(program, "aVertexPos");
        this.gl.enableVertexAttribArray(program.vertexPositionAttribute);

        program.vertexNormalAttribute = this.gl.getAttribLocation(program, "aVertexNormal");
        this.gl.enableVertexAttribArray(program.vertexNormalAttribute);

        program.vertexColorAttribute = this.gl.getAttribLocation(program, "aVertexColor");
        this.gl.enableVertexAttribArray(program.vertexColorAttribute);

        program.vertexTextureAttribute = this.gl.getAttribLocation(program, "aTextureCoords");
        this.gl.enableVertexAttribArray(program.vertexTextureAttribute);
        
        program.pMatrixUniform = this.gl.getUniformLocation(program, "uPMatrix");
        program.vMatrixUniform = this.gl.getUniformLocation(program, "uVMatrix");
        program.mMatrixUniform = this.gl.getUniformLocation(program, "uMMatrix");
        program.nMatrixUniform = this.gl.getUniformLocation(program, "uNMatrix");
        program.posLlumUniform = this.gl.getUniformLocation(program, "uPosLlum");
        program.posLlum2Uniform = this.gl.getUniformLocation(program, "uPosLlum2");
        program.direccioUniform = this.gl.getUniformLocation(program, "direccio");

	return program;
    }

    Renderer.prototype.mvPushMatrix = function() { //desa la ModelView
        var c = mat4.create();
        mat4.copy(c,this.mvMatrix);
        this.mvMatrixStack.push(c);
    }

    Renderer.prototype.mvPopMatrix = function() { //recupera la darrera ModelView desada
        if (this.mvMatrixStack.length == 0) {
            throw "PopMatrix no ha trobat cap matriu desada!"; 
        }
        this.mvMatrix = this.mvMatrixStack.pop();
    }

    Renderer.prototype.setMatrixUniforms = function() { //enviem totes les uniforms del programa actual
        this.gl.uniformMatrix4fv(this.shaderProgram.pMatrixUniform, false, this.pMatrix);
        this.gl.uniformMatrix4fv(this.shaderProgram.mMatrixUniform, false, this.mvMatrix);
        this.gl.uniformMatrix4fv(this.shaderProgram.vMatrixUniform, false, this.vMatrix);
        this.gl.uniform3fv(this.shaderProgram.posLlumUniform, this.posLlum);
        this.gl.uniform3fv(this.shaderProgram.posLlum2Uniform, this.posLlum2);
        this.gl.uniform3fv(this.shaderProgram.direccioUniform, vec3.fromValues(-this.posX, 0, -this.posZ)); // vec3.fromValues(Math.tan(this.rotacio), 0, 1)
        var normalMatrix = mat3.create();
        mat3.normalFromMat4(normalMatrix, this.mvMatrix);
        this.gl.uniformMatrix3fv(this.shaderProgram.nMatrixUniform, false, normalMatrix);
    }

    Renderer.prototype.update = function() {
        var timeNow = new Date().getTime()/1000.0;
        var deltaTime = timeNow - this.tempsPrevi;
        this.tempsPrevi = timeNow;
        //console.log(this.posX, this.posZ);
        this.posLlum = vec3.fromValues(this.posX+1.5, 0.0, this.posZ); 
        this.posLlum2 = vec3.fromValues(this.posX-1.5, 0.0, this.posZ); 

	renderer.handleKeys(deltaTime); //moviment
	renderer.handleMouse(deltaTime); //càmera
    }

    Renderer.prototype.draw = function() {
        this.t += 0.1;
        //mat4.perspective(this.pMatrix,90, this.gl.viewportWidth / this.gl.viewportHeight, 1, 17);
	//netejar la pantalla
        this.gl.viewport(0, 0, this.gl.viewportWidth, this.gl.viewportHeight);
        this.gl.clear(this.gl.COLOR_BUFFER_BIT | this.gl.DEPTH_BUFFER_BIT);
	
	//resetejar la ModelView
        mat4.identity(this.mvMatrix);
        mat4.identity(this.vMatrix);

        switch (CAMERA_ACTUAL%3) {
        case 0:
            mat4.rotate(this.vMatrix, this.vMatrix, degToRad(this.camera.rot[0]), [1, 0, 0]);
            mat4.rotate(this.vMatrix, this.vMatrix, degToRad(this.camera.rot[1]), [0, 1, 0]);
            mat4.translate(this.vMatrix, this.vMatrix, [this.camPosX, 0, this.camPosZ]);
            break;
        case 1:
            mat4.translate(this.vMatrix, this.vMatrix, [0,  0, -5]);
            mat4.rotate(this.vMatrix, this.vMatrix, degToRad(-this.rotacio ), [0, 1, 0]);
            mat4.translate(this.vMatrix, this.vMatrix, [-this.posX, -2, -this.posZ]);
            break;
        case 2:
            mat4.rotate(this.vMatrix, this.vMatrix, degToRad(15  ), [1, 0, 0]);
            mat4.translate(this.vMatrix, this.vMatrix, [0, 1.1, -1]);
            mat4.rotate(this.vMatrix, this.vMatrix, degToRad(-this.rotacio ), [0, 1, 0]);
            mat4.translate(this.vMatrix, this.vMatrix, [-this.posX, -2, -this.posZ]);
            break;
        }
	//aplicar les transformacions de la càmera
	//fem un translate fixe per que la camera roti al voltant de l'escena
        
               
        

        /*mat4.rotate(this.mvMatrix, this.mvMatrix, degToRad(this.camera.rot[0]), [1, 0, 0]);
        mat4.rotate(this.mvMatrix, this.mvMatrix, degToRad(this.camera.rot[1]), [0, 1, 0]);
        mat4.translate(this.mvMatrix, this.mvMatrix, [this.camPosX, 0, this.camPosZ]);*/
        

	//dibuixar el cotxe
        if (this.car.loaded) {
            this.mvPushMatrix();
                mat4.translate(this.mvMatrix, this.mvMatrix, [this.posX, 0, this.posZ]);
                mat4.rotate(this.mvMatrix, this.mvMatrix, degToRad(this.rotacio +180), [0, 1, 0]);
                mat4.scale(this.mvMatrix, this.mvMatrix, [.05, .05, .05]);
                this.setMatrixUniforms(); //envia les matrius (ModelView i Projection al shader
                this.car.draw(this.gl,this.shaderProgram);
            this.mvPopMatrix();
        }
    //dibuixa el terra
        this.mvPushMatrix();
            mat4.translate(this.mvMatrix, this.mvMatrix, [0,-0.75,0]);
            //mat4.rotate(this.mvMatrix, this.mvMatrix, degToRad(this.rotacio +180), [0, 1, 0]);
            mat4.scale(this.mvMatrix, this.mvMatrix, [1000, .01, 1000]);
            this.setMatrixUniforms(); //envia les matrius (ModelView i Projection al shader
            this.floor.draw(this.gl,this.shaderProgram);
        this.mvPopMatrix();
        //dibuixa piramide
        for(this.i = 0; this.i < 100; this.i++)
        {
            this.mvPushMatrix();
                mat4.translate(this.mvMatrix, this.mvMatrix, [Math.sin(this.i)*10,-0.75,-this.i*3]);                //mat4.rotate(this.mvMatrix, this.mvMatrix, degToRad(this.rotacio +180), [0, 1, 0]);
                mat4.scale(this.mvMatrix, this.mvMatrix, [1.0, 1.0, 1.0]);
                this.setMatrixUniforms(); //envia les matrius (ModelView i Projection al shader
                this.pyramid.draw(this.gl,this.shaderProgram);
            this.mvPopMatrix();
        }
    
    }

    var renderer;

    function loop() { //main loop de l'escena, es truca cada vegada que es vol refrescar la pantalla
        requestAnimFrame(loop);
        renderer.update();
        renderer.draw();
    }

    function webGLStart() {
    	var canvas = document.getElementById("canvas");
	canvas.width = document.body.clientWidth; 
 	canvas.height = document.body.clientHeight;
	renderer = new Renderer(canvas);
        loop();
    }

</script>
</head>

<body onload="webGLStart();" style="margin: 0px;">
    <canvas id="canvas" style="border: none; width; 100%; height: 100%;"></canvas>
<span style="position:fixed;top:10px;left:10px;color:white;z-index:100000000;" id="msg"></span>
</body>
</html>
